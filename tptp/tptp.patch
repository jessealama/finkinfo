diff -Naur '--exclude=*~' TPTP-v5.4.0/Scripts/tptp2T TPTP-v5.4.0.fink/Scripts/tptp2T
--- TPTP-v5.4.0/Scripts/tptp2T	2010-08-13 06:42:31.000000000 +0200
+++ TPTP-v5.4.0.fink/Scripts/tptp2T	2012-09-05 17:35:13.000000000 +0200
@@ -5,10 +5,10 @@
 #----Alex Roederer, based on the tptp1T script by Geoff Sutcliffe
 #----V2.3 Feb 17th, 2008
 
-use strict "vars"; 
+use strict "vars";
 #------------------------------------------------------------------------------
 #----Defines default TPTP home directory
-my $TPTPDirectory = '/home/graph/tptp/TPTP';
+my $TPTPDirectory = '@PREFIX@/share/tptp';
 
 #----Replaces default with user defined
 if (exists($ENV{TPTP})) {
@@ -17,13 +17,13 @@
 
 #----Other directories, file names, etc
 my $SortedProblemFileName = "/tmp/tptp2T_$$";
-my $StatisticsFileName = 
-"$TPTPDirectory/Documents/ProblemAndSolutionStatistics";
+my $StatisticsFileName =
+"@PREFIX@/share/doc/tptp/ProblemAndSolutionStatistics";
 #------------------------------------------------------------------------------
 #----Define hashes that will represent the formated problem and solution
     my %ProblemIndexHash;
-    my %SolutionIndexHash; 
-    my %AbbreviationHash; 
+    my %SolutionIndexHash;
+    my %AbbreviationHash;
 
 #----Set indexes into array and file names
 #----Indices
@@ -32,10 +32,10 @@
         'Version' => 1,
         'Status' => 2,
         'Rating' => 3,
-        'Formulae' => 4, 
+        'Formulae' => 4,
         'Clauses' => 4,
         'NonHornClauses' => 5,
-        'UnitFormulae' => 6, 
+        'UnitFormulae' => 6,
         'UnitClauses' => 6,
         'TypeFormulae' => 7,
         'DefnFormulae' => 8,
@@ -61,12 +61,12 @@
         'AvTermDepth' => 26,
         'Functions' => 27,
         'Constants' => 28,
-        'FunctionArities' => 29, 
+        'FunctionArities' => 29,
         'ArithmeticSymbols' => 30,
 #----These are extra computed statistics, not taken from the data file
-        'Domain' => 31, 
+        'Domain' => 31,
 #----The final number of statistics
-        'SupType' => 32, 
+        'SupType' => 32,
 #----Number of statistics from data file
         'NumberOfStatistics' => 31,
     );
@@ -74,9 +74,9 @@
     %SolutionIndexHash = (
         'SystemName' => 0,
         'Result' => 1,
-        'ResultTime' => 2, 
+        'ResultTime' => 2,
         'Output' => 3,
-        'OutputTime' => 4, 
+        'OutputTime' => 4,
         'SolutionFormulae' => 5,
         'SolutionClauses' => 6,
         'SolutionLeaves' => 7,
@@ -85,7 +85,7 @@
         'SolutionEqualityAtoms' => 10,
         'MaximalFormulaDepth' => 11,
         'MaximalClauseSize' => 12,
-        'MaximalTermDepth' => 13, 
+        'MaximalTermDepth' => 13,
 #----These are extra computed statistics, not taken from the data file
         'SOLNumberOfStatistics' => 14, #----Number from data file
     );
@@ -125,27 +125,27 @@
 
 #---Pushes STDERR to STDOUT
     close(STDERR);
-    open(STDERR,">&STDOUT") || 
+    open(STDERR,">&STDOUT") ||
 die("ERROR: Cannot redirect STDERR to STDOUT\n");
 
 #----Flush output make pipes hot!
     $| = 1;
 
 #----Check arguments, if none, given or -h is called, print help
-    if (@ARGV == 0 || ($ARGV[0] eq "-h") || ($ARGV[0] eq "--h")) { 
+    if (@ARGV == 0 || ($ARGV[0] eq "-h") || ($ARGV[0] eq "--h")) {
         Usage();
         die("\n");
     }
 
 #----Look if the data is to be taken from the files, or from the arguments
-    if (@ARGV >= 2 && $ARGV[0] eq "-d") { 
+    if (@ARGV >= 2 && $ARGV[0] eq "-d") {
 
 #----Delete the -d
         shift @ARGV;
 #DEBUG print("OUT CMND Statistics: @ARGV\n");
         CheckProblemFromCommandLineData(@ARGV);
     } else {
-#DEBUG print("OUT LIST Statistics: @ARGV\n"); 
+#DEBUG print("OUT LIST Statistics: @ARGV\n");
         ListProblemsFromStatistics(@ARGV);
     }
 }
@@ -162,26 +162,26 @@
 
 <FileName> lists the problems to be considered (default is all).
 -q sets quietness: 1=continuous update, 2=final count, 3=quiet
--pp prints problem lines, -ps prints solution lines, -pps prints both 
+-pp prints problem lines, -ps prints solution lines, -pps prints both
 (Defaults: Only Problem Constraints = -pp
            Only Solution Constraints = -ps
            Both types of Constraints = -pps)
-- negates the meaning of any constraint. 
+- negates the meaning of any constraint.
 or allows for logical or between constraints.
 and allows for logical and between constraints.
-a space between constraints is treated as an and. 
-Curley braces {} allow for grouping of terms.  
+a space between constraints is treated as an and.
+Curley braces {} allow for grouping of terms.
 
 For constraints in which an upper and lower bound are required,
-a dash (-) may be used to indicate don't care. 
+a dash (-) may be used to indicate don't care.
+
+A <Constraint> is selected from:
 
-A <Constraint> is selected from: 
-    
     Problem Constraints:
 
     Form _ (THF, TFF, FOF, CNF, ANY - default is ANY)
     Version _ (Standard, Incomplete, Augmented, Especial, Biased)
-    Status _ (Theorem, CounterSatisfiable, Unknown, 
+    Status _ (Theorem, CounterSatisfiable, Unknown,
               Unsatisfiable, Satisfiable, Open)
     Rating _ _
     Formulae _ _ (THF, TFF, FOF)
@@ -213,10 +213,10 @@
     AverageLiterals _ _ (CNF)
     Domains ALG ANA ... TOP
 
-    Solution Constraints (multiple sets allowed): 
-    
+    Solution Constraints (multiple sets allowed):
+
     System Name[---Version] (System ANY for any system)
-    Result _ (SZS value, e.g., THM) 
+    Result _ (SZS value, e.g., THM)
     ResultTime _ _
     Output _ (SZS value, e.g., Ref)
     SolutionFormulae _ _ (THF, TFF, FOF)
@@ -263,75 +263,75 @@
     my (@Constraints) = @_;
 
     my $PrintOption;
-    my $QuietnessOption; 
+    my $QuietnessOption;
     my $ProblemListFileHandle = "ProblemListFileHandle";
     my $StatisticsFileHandle = "StatisticsFileHandle";
     my $StatisticsLine;
     my $ProblemName;
     my @Statistics;
-    my @TempStats; 
-    my $ProblemType; 
-    my $GoodProblem; 
+    my @TempStats;
+    my $ProblemType;
+    my $GoodProblem;
 
     my @SolutionStatistics;
-    my @SolutionLines; 
+    my @SolutionLines;
 
     my @ProblemStatistics;
-    my $ProblemLine;  
+    my $ProblemLine;
     my $indexThroughProblems;
-    my $SomeSolutionExists; 
-    my $SystemChecksIndex; 
-   
-    my $Garbage; 
- 
-    my $FinalResultHolder; 
-    my $ConstraintsStackArrayRef; 
+    my $SomeSolutionExists;
+    my $SystemChecksIndex;
+
+    my $Garbage;
+
+    my $FinalResultHolder;
+    my $ConstraintsStackArrayRef;
 
-    my $SystemChecksResults;         
-    my $NumberOfSystems; 
+    my $SystemChecksResults;
+    my $NumberOfSystems;
 
-    my $PrintFlag; 
+    my $PrintFlag;
     my $Counter;
     my $ProblemCounter = 0;
-    my $SolutionCounter = 0; 
+    my $SolutionCounter = 0;
     my $IdleFlag = 0;
-    my $CurrentDomain = "???"; 
-    my $LastDomain = "???"; 
+    my $CurrentDomain = "???";
+    my $LastDomain = "???";
 
-    my @GoodSolutions; 
-    my @SolutionNamesNotToPrint;  
-    my $SolutionNameNotToPrint; 
-
-    my $CurrentConstraint = 0; 
-    my @ConstraintsStack; 
-    my @ConstraintsStackSave; 
-    my $ConstraintsStackRef; 
-    my @ConstraintsStackSaveForPrinting; 
-    my $ResultValuePushedThrough = 1; 
-    my $SystemAnyChosen; 
+    my @GoodSolutions;
+    my @SolutionNamesNotToPrint;
+    my $SolutionNameNotToPrint;
+
+    my $CurrentConstraint = 0;
+    my @ConstraintsStack;
+    my @ConstraintsStackSave;
+    my $ConstraintsStackRef;
+    my @ConstraintsStackSaveForPrinting;
+    my $ResultValuePushedThrough = 1;
+    my $SystemAnyChosen;
 
 #----If a file specified for problems to consider, use it
-    if (@Constraints >= 2 && $Constraints[0] eq "-f") { 
+    if (@Constraints >= 2 && $Constraints[0] eq "-f") {
 #----Delete the -f
         shift @Constraints;
 #----Sort the problem list so it has the same order as the statistics files
         system("sort -o $SortedProblemFileName -k 1.1,1.6 -k 1.7,1.7r -k 1.8n $Constraints[0]");
 #----Delete the file name
-        shift @Constraints; 
-        open($ProblemListFileHandle,"<$SortedProblemFileName") || 
+        shift @Constraints;
+        open($ProblemListFileHandle,"<$SortedProblemFileName") ||
 die("ERROR: Cannot open and sort $Constraints[0]\n");
 
 #----Otherwise use the Statistics (all problems considered)
     } else {
-        open($ProblemListFileHandle, "<$StatisticsFileName") || 
+        open($ProblemListFileHandle, "<$StatisticsFileName") ||
 die "ERROR: Cannot open $StatisticsFileName";
     }
 
 #----Look for quietness flag
     if ($Constraints[0] =~ /^-q/) {
-        $QuietnessOption = shift(@Constraints); 
+        $QuietnessOption = shift(@Constraints);
     } else {
-        $QuietnessOption = "-q2"; 
+        $QuietnessOption = "-q2";
     }
 
 #----Look for print options flag
@@ -339,35 +339,35 @@
         $PrintOption = shift(@Constraints);
     } else {
 
-        $PrintFlag = 0; 
+        $PrintFlag = 0;
         $Counter = 0;
-        $PrintOption = "-pps"; 
+        $PrintOption = "-pps";
 
         while (defined ($Constraints[$Counter])) {
             if (($Constraints[$Counter]) =~ /syst/i) {
                     $PrintFlag = 1;
             }
-            $Counter++; 
+            $Counter++;
         }
         if ($PrintFlag == 0) {
-            $PrintOption = "-pp"; 
-        } 
+            $PrintOption = "-pp";
+        }
     }
 
-#----Here we create @ConstraintsStack, that contains the system names and 
-#----logical operators. This will be filled in to later check that the 
-#----entire logical systems onstruct has been satisfied, before the problem 
-#----is printed. 
+#----Here we create @ConstraintsStack, that contains the system names and
+#----logical operators. This will be filled in to later check that the
+#----entire logical systems onstruct has been satisfied, before the problem
+#----is printed.
 
-    @ConstraintsStack = (); 
+    @ConstraintsStack = ();
     $ConstraintsStackRef = CreateConstraintsStack(\@Constraints,
-\@ConstraintsStack); 
-    @ConstraintsStack = @$ConstraintsStackRef; 
-    @ConstraintsStackSave = @ConstraintsStack; 
-#DEGBUG print("ConstraintsStack: @ConstraintsStack\n"); 
+\@ConstraintsStack);
+    @ConstraintsStack = @$ConstraintsStackRef;
+    @ConstraintsStackSave = @ConstraintsStack;
+#DEGBUG print("ConstraintsStack: @ConstraintsStack\n");
 
 #----Open the statistics file
-    open($StatisticsFileHandle,"<$StatisticsFileName") || 
+    open($StatisticsFileHandle,"<$StatisticsFileName") ||
 die("ERROR: Cannot open $StatisticsFileName\n");
 
 #----Print appropriate headers - get them from the statistics file
@@ -396,7 +396,7 @@
 #DEBUG print("ProblemName block: $ProblemName\n");
         $StatisticsLine = <$StatisticsFileHandle>;
         chomp($StatisticsLine);
-        while (defined($StatisticsLine) && 
+        while (defined($StatisticsLine) &&
 $StatisticsLine !~ /^\Q${ProblemName}\E/) {
             $StatisticsLine = <$StatisticsFileHandle>;
             chomp($StatisticsLine);
@@ -405,9 +405,9 @@
             die("ERROR: No statistics for $ProblemName\n");
         }
 
-#----Erase any information in these two arrays: 
-#----These will be used to hold the statistics lines. 
-        @SolutionStatistics = (); 
+#----Erase any information in these two arrays:
+#----These will be used to hold the statistics lines.
+        @SolutionStatistics = ();
         @SolutionLines = ();
 
 #----For each statistics line (skipping blank lines)
@@ -426,21 +426,21 @@
             } elsif ($StatisticsLine =~ /^.+---.+/)  {
                 $ProblemType = "SOL";
             } else {
-                die("ERROR: Cannot work out type for \"$StatisticsLine\"\n"); 
+                die("ERROR: Cannot work out type for \"$StatisticsLine\"\n");
             }
 
 #----Space Statistics Out According Type of Problem
             if ($ProblemType eq "THF" || $ProblemType eq "TFF" ||
 $ProblemType eq "FOF" || $ProblemType eq "CNF") {
-                $ProblemLine = $StatisticsLine; 
-                $Statistics[$ProblemIndexHash{'Domain'}] = substr($Statistics[0],0,3); 
-                $Statistics[$ProblemIndexHash{'SupType'}] = $ProblemType; 
+                $ProblemLine = $StatisticsLine;
+                $Statistics[$ProblemIndexHash{'Domain'}] = substr($Statistics[0],0,3);
+                $Statistics[$ProblemIndexHash{'SupType'}] = $ProblemType;
                 $#Statistics = $ProblemIndexHash{'SupType'};
 #----Save the problem statistics (@Statistics now gets used for each solution)
                 @ProblemStatistics = @Statistics;
             } elsif ($ProblemType eq "SOL") {
-                push (@SolutionLines, $StatisticsLine); 
-                $Statistics[$ProblemIndexHash{'SupType'}] = $ProblemType; 
+                push (@SolutionLines, $StatisticsLine);
+                $Statistics[$ProblemIndexHash{'SupType'}] = $ProblemType;
                 $#Statistics = $ProblemIndexHash{'SupType'};
 #----Make a reference to a copy of the statistics and save in list
                 push (@SolutionStatistics, [ @Statistics ]);
@@ -452,9 +452,9 @@
         }
 
 #----Get the Current Domain for Idleprinter...
-        $CurrentDomain = $ProblemStatistics[$ProblemIndexHash{'Domain'}]; 
+        $CurrentDomain = $ProblemStatistics[$ProblemIndexHash{'Domain'}];
 
-#----Call CheckConstraints on the Problem to determine Goodness. 
+#----Call CheckConstraints on the Problem to determine Goodness.
         ($GoodProblem,$Garbage) = CheckConstraints(
 $ProblemStatistics[$ProblemIndexHash{'SupType'}],\@ConstraintsStack,
 \@Constraints,\@ProblemStatistics,\@ProblemStatistics);
@@ -465,158 +465,158 @@
 #----If required, print the prob and sol counts
             if ($QuietnessOption le "-q2") {
                 print(
-"\n\% $ProblemCounter problems and $SolutionCounter solutions found\n"); 
+"\n\% $ProblemCounter problems and $SolutionCounter solutions found\n");
             }
 #----Close the files, and exit back to main.
-            close($StatisticsFileHandle); 
+            close($StatisticsFileHandle);
             close($ProblemListFileHandle);
             system("rm -f $SortedProblemFileName");
-            return(1); 
+            return(1);
         }
 #----END OF IMMEDIATE ABORT
 
 #----If we've found a good problem, start processing the solutions
         if ($GoodProblem) {
             @ConstraintsStack = @ConstraintsStackSave;
-            $SomeSolutionExists = 0; 
+            $SomeSolutionExists = 0;
             $indexThroughProblems = 0;
-            @GoodSolutions = (); 
+            @GoodSolutions = ();
 
 #----Go through the statistics lines,
 #----Each time through the loop, CheckConstraints is called.
 #----It returns a Result and the Constraints Stack
 #----The result is put into @GoodSolutions. The Stack is captured.
- 
+
             while (defined($SolutionStatistics[$indexThroughProblems])) {
-                ($FinalResultHolder,$ConstraintsStackArrayRef) = 
+                ($FinalResultHolder,$ConstraintsStackArrayRef) =
 CheckConstraints("SOL",\@ConstraintsStack,\@Constraints,
 $SolutionStatistics[$indexThroughProblems],\@ProblemStatistics);
-                @ConstraintsStack = @$ConstraintsStackArrayRef; 
-                $GoodSolutions[$indexThroughProblems] = $FinalResultHolder; 
-                $indexThroughProblems++; 
+                @ConstraintsStack = @$ConstraintsStackArrayRef;
+                $GoodSolutions[$indexThroughProblems] = $FinalResultHolder;
+                $indexThroughProblems++;
             }
-#DEBUG print("GoodSolutions: @GoodSolutions and @ConstraintsStack\n"); 
+#DEBUG print("GoodSolutions: @GoodSolutions and @ConstraintsStack\n");
 #DEBUG print("ConstraintsStack before changes: @ConstraintsStack\n");
 
-            $CurrentConstraint = 0; 
+            $CurrentConstraint = 0;
             $SystemChecksIndex = 0;
 
-#----All solution lines are finished, and the Constraints Stack is finished. 
+#----All solution lines are finished, and the Constraints Stack is finished.
 #----If any of the S: markers in the ConstraintsStack don't have any
-#----RES:* after them, we assume it's because that system constraint 
-#----failed for all lines, so we set it to RES:0 
-            while (defined($CurrentConstraint = 
+#----RES:* after them, we assume it's because that system constraint
+#----failed for all lines, so we set it to RES:0
+            while (defined($CurrentConstraint =
 $ConstraintsStack[$SystemChecksIndex])) {
-                if ($CurrentConstraint =~ m/^S/ && 
+                if ($CurrentConstraint =~ m/^S/ &&
 $CurrentConstraint !~ m/RES:[0-9]+$/) {
                     $ConstraintsStack[$SystemChecksIndex] .= "RES:0";
                 }
-                $SystemChecksIndex++;  
+                $SystemChecksIndex++;
             }
-#DEBUG print("ConstraintsStack After First Sub: @ConstraintsStack\n"); 
+#DEBUG print("ConstraintsStack After First Sub: @ConstraintsStack\n");
 
-            @ConstraintsStackSaveForPrinting = @ConstraintsStack; 
-            $ResultValuePushedThrough = 1; 
+            @ConstraintsStackSaveForPrinting = @ConstraintsStack;
+            $ResultValuePushedThrough = 1;
             $SystemChecksIndex = 0;
-           
-#----Now, go through the ConstraintsStack, and mark off any 
-#----lines that, while true, contribute nothing to the answer ( for example, 
+
+#----Now, go through the ConstraintsStack, and mark off any
+#----lines that, while true, contribute nothing to the answer ( for example,
 #----1 and 0 would evaluate to 0, and the first solution line, while true
-#----in regards to its system constraint, does not make the entire 
+#----in regards to its system constraint, does not make the entire
 #----expression true, so it shouldn't be printed).
- 
-            while (defined($CurrentConstraint = 
+
+            while (defined($CurrentConstraint =
 $ConstraintsStackSaveForPrinting[$SystemChecksIndex])) {
                 if ($CurrentConstraint =~ /^S.*0$/) {
-                    $ResultValuePushedThrough = 0; 
-                } elsif (($CurrentConstraint =~ /^S.*1$/ || 
+                    $ResultValuePushedThrough = 0;
+                } elsif (($CurrentConstraint =~ /^S.*1$/ ||
 $CurrentConstraint =~ /^S.*7$/) && $ResultValuePushedThrough == 0) {
-                    $ConstraintsStackSaveForPrinting[$SystemChecksIndex] =~ 
-s/1$/0/; 
+                    $ConstraintsStackSaveForPrinting[$SystemChecksIndex] =~
+s/1$/0/;
                 } elsif ($CurrentConstraint =~ /or/) {
-                    $ResultValuePushedThrough = 1; 
+                    $ResultValuePushedThrough = 1;
                 }
-            $SystemChecksIndex++; 
+            $SystemChecksIndex++;
             }
 
-            $ResultValuePushedThrough = 1; 
+            $ResultValuePushedThrough = 1;
             $SystemChecksIndex--;
-            
-#----And go through in the other direction, right to left, to catch any that 
-#----were located at the beginning of a clause. 
-            while ($SystemChecksIndex > -1 && defined($CurrentConstraint = 
+
+#----And go through in the other direction, right to left, to catch any that
+#----were located at the beginning of a clause.
+            while ($SystemChecksIndex > -1 && defined($CurrentConstraint =
 $ConstraintsStackSaveForPrinting[$SystemChecksIndex])) {
                 if ($CurrentConstraint =~ /^S.*0$/) {
-                    $ResultValuePushedThrough = 0; 
-                } elsif (($CurrentConstraint =~ /^S.*1$/ || 
+                    $ResultValuePushedThrough = 0;
+                } elsif (($CurrentConstraint =~ /^S.*1$/ ||
 $CurrentConstraint =~ /^S.*7$/)  && $ResultValuePushedThrough == 0) {
-                    $ConstraintsStackSaveForPrinting[$SystemChecksIndex] =~ 
-s/1$/0/; 
+                    $ConstraintsStackSaveForPrinting[$SystemChecksIndex] =~
+s/1$/0/;
                 } elsif ($CurrentConstraint =~ /or/) {
-                    $ResultValuePushedThrough = 1; 
+                    $ResultValuePushedThrough = 1;
                 }
-            $SystemChecksIndex--; 
+            $SystemChecksIndex--;
             }
 #DEBUG print("Printing Save After: @ConstraintsStackSaveForPrinting\n");
 
-            @SolutionNamesNotToPrint = (); 
-            $SystemAnyChosen = 0; 
+            @SolutionNamesNotToPrint = ();
+            $SystemAnyChosen = 0;
 
-#----Now that the string is fixed up, go through the ConstraintsStack, 
-#----and pull out the names for systems that are RES:0 so we don't print them. 
+#----Now that the string is fixed up, go through the ConstraintsStack,
+#----and pull out the names for systems that are RES:0 so we don't print them.
 
-            $SystemChecksIndex = 0; 
-            while (defined($CurrentConstraint = 
+            $SystemChecksIndex = 0;
+            while (defined($CurrentConstraint =
 $ConstraintsStackSaveForPrinting[$SystemChecksIndex])) {
 #DEBUG print("Current: $CurrentConstraint!\n");
-                if ($CurrentConstraint =~ /^S.*0$/ && 
+                if ($CurrentConstraint =~ /^S.*0$/ &&
 $CurrentConstraint !~ /^S:ANY/) {
-                    $CurrentConstraint =~ s/^S://; 
-                    $CurrentConstraint =~ s/RES:0$//; 
-                    push(@SolutionNamesNotToPrint,$CurrentConstraint); 
-                } elsif ($CurrentConstraint =~ /^S:ANY/ && 
+                    $CurrentConstraint =~ s/^S://;
+                    $CurrentConstraint =~ s/RES:0$//;
+                    push(@SolutionNamesNotToPrint,$CurrentConstraint);
+                } elsif ($CurrentConstraint =~ /^S:ANY/ &&
 $CurrentConstraint =~ /RES:7$/) {
-                    $SystemAnyChosen = 1; 
+                    $SystemAnyChosen = 1;
                 }
-                $SystemChecksIndex++; 
+                $SystemChecksIndex++;
             }
-#DEBUG print("SolutionNamesNotToPrint : @SolutionNamesNotToPrint\n"); 
-#DEBUG print("GoodSolutions: @GoodSolutions\n"); 
+#DEBUG print("SolutionNamesNotToPrint : @SolutionNamesNotToPrint\n");
+#DEBUG print("GoodSolutions: @GoodSolutions\n");
 
 #----Get each name that shouldn't be printed, and find the corresponding
 #----entry in the GoodSolutions array, and set it to 0.
              foreach $SolutionNameNotToPrint (@SolutionNamesNotToPrint) {
                  $indexThroughProblems = 0;
                  while (defined($SolutionLines[$indexThroughProblems])) {
-                     if ($SolutionLines[$indexThroughProblems] =~ 
+                     if ($SolutionLines[$indexThroughProblems] =~
 /^$SolutionNameNotToPrint/) {
-                         $GoodSolutions[$indexThroughProblems] = 0; 
+                         $GoodSolutions[$indexThroughProblems] = 0;
                      }
-                     $indexThroughProblems++; 
+                     $indexThroughProblems++;
                  }
              }
 
-#DEBUG print("GoodSolutions After: @GoodSolutions\n"); 
+#DEBUG print("GoodSolutions After: @GoodSolutions\n");
 
-#----Pass through GoodSolutions Array, and check to see that something 
+#----Pass through GoodSolutions Array, and check to see that something
 #----is nonzero, and set SomeSolutionExists
-            $SomeSolutionExists=0; 
-            $indexThroughProblems = 0; 
+            $SomeSolutionExists=0;
+            $indexThroughProblems = 0;
 
-            while(defined($GoodSolutions[$indexThroughProblems])) { 
+            while(defined($GoodSolutions[$indexThroughProblems])) {
                 if ($GoodSolutions[$indexThroughProblems] > 0) {
-                    $SomeSolutionExists = 1; 
+                    $SomeSolutionExists = 1;
                 }
-                $indexThroughProblems++; 
+                $indexThroughProblems++;
             }
 #DEBUG print("Stack After: @ConstraintsStack\n");
 
-#----In preparation for the meta-check (to see if the block, as a whole, 
+#----In preparation for the meta-check (to see if the block, as a whole,
 #----satisfies the constraints), change every instance of "S:SystemNameRes:X"
-#----to the value of X, so it may be passed to the LogicParser. 
-            $SystemChecksResults = 1; 
+#----to the value of X, so it may be passed to the LogicParser.
+            $SystemChecksResults = 1;
             $SystemChecksIndex = 0;
-            while (defined($CurrentConstraint = 
+            while (defined($CurrentConstraint =
 $ConstraintsStack[$SystemChecksIndex])) {
                  if ($CurrentConstraint =~ m/^S/) {
                      if ($CurrentConstraint =~ m/RES:0$/) {
@@ -625,72 +625,72 @@
                          $ConstraintsStack[$SystemChecksIndex] = 1;
                      }
                  }
-                 $SystemChecksIndex++; 
+                 $SystemChecksIndex++;
             }
-#DEBUG print("Send to parser: @ConstraintsStack\n");            
+#DEBUG print("Send to parser: @ConstraintsStack\n");
 
-#----Check the ConstraintsStack now for truthiness. 
-            ($SystemChecksResults,$Garbage) = 
+#----Check the ConstraintsStack now for truthiness.
+            ($SystemChecksResults,$Garbage) =
 LogicParser("SOL",\@ConstraintsStack);
 
 #----If some solution remains to be printed, and the solution block as a whole
 #----satisfies the set of solution constraints provided, print:
-            if (scalar(@GoodSolutions) == 0 || 
+            if (scalar(@GoodSolutions) == 0 ||
 ($SomeSolutionExists && $SystemChecksResults)) {
                 if ($PrintOption eq "-pp" || $PrintOption eq "-pps") {
 #----This prints the line before we tear it up into pieces
                     if (defined($ProblemLine)) {
                         if ($IdleFlag > 0 && $QuietnessOption le "-q1") {
-                            print("\n"); 
+                            print("\n");
                         }
-                        print("$ProblemLine\n"); 
-                        $IdleFlag = 0; 
-                        $ProblemCounter++; 
+                        print("$ProblemLine\n");
+                        $IdleFlag = 0;
+                        $ProblemCounter++;
                     }
                 }
-#----If solution lines are desired, go through the GoodSolutions array. 
-#----For each entry that is nonzero, print the corresponding line. 
+#----If solution lines are desired, go through the GoodSolutions array.
+#----For each entry that is nonzero, print the corresponding line.
                 if ($PrintOption eq "-ps" || $PrintOption eq "-pps") {
                     $indexThroughProblems = 0;
 
                     while (defined($GoodSolutions[$indexThroughProblems])) {
                         if ($GoodSolutions[$indexThroughProblems] > 0) {
-                           print("   $SolutionLines[$indexThroughProblems]\n"); 
-                           $IdleFlag = 0; 
-                           $SolutionCounter++; 
+                           print("   $SolutionLines[$indexThroughProblems]\n");
+                           $IdleFlag = 0;
+                           $SolutionCounter++;
                         }
-                        $indexThroughProblems++; 
-                    }    
-                }   
-            }                 
+                        $indexThroughProblems++;
+                    }
+                }
+            }
         }
 #----Otherwise, if the problem was bad, or the solution block failed to meet
-#----the desired constraints, we are not printing, so we sit idle. 
+#----the desired constraints, we are not printing, so we sit idle.
         if (!$GoodProblem || !$SystemChecksResults || !$SomeSolutionExists) {
             if ($QuietnessOption le "-q1") {
                 if ($IdleFlag == 0) {
-                    print("\%"); 
+                    print("\%");
                 }
                 if ($IdleFlag > 0 && $IdleFlag % 200 == 0) {
                     if ($CurrentDomain ne $LastDomain) {
-                        print("$CurrentDomain"); 
-                        $LastDomain = $CurrentDomain; 
+                        print("$CurrentDomain");
+                        $LastDomain = $CurrentDomain;
                     }
-                        print("."); 
-                } 
-                $IdleFlag++; 
+                        print(".");
+                }
+                $IdleFlag++;
             }
         }
-    }   
+    }
 
 
     if ($QuietnessOption le "-q2") {
         print(
-"\n\% $ProblemCounter problems and $SolutionCounter solutions found\n"); 
+"\n\% $ProblemCounter problems and $SolutionCounter solutions found\n");
     }
 
 #----Close all the files
-    close($StatisticsFileHandle); 
+    close($StatisticsFileHandle);
     close($ProblemListFileHandle);
     system("rm -f $SortedProblemFileName");
 }
@@ -722,57 +722,57 @@
 #------------------------------------------------------------------------------
 sub CreateConstraintsStack {
 
-    my ($ConstraintsRef,$ConstraintsStackRef) = @_; 
-    my @ConstraintsArrayFROZEN = @$ConstraintsRef; 
-    my @Constraints = @ConstraintsArrayFROZEN; 
-    my @ConstraintsStack = @$ConstraintsStackRef; 
+    my ($ConstraintsRef,$ConstraintsStackRef) = @_;
+    my @ConstraintsArrayFROZEN = @$ConstraintsRef;
+    my @Constraints = @ConstraintsArrayFROZEN;
+    my @ConstraintsStack = @$ConstraintsStackRef;
 
-    my $ConstraintIndex; 
+    my $ConstraintIndex;
 
     my $LeftParen;
-    my $RightParen; 
+    my $RightParen;
 
-#----Go through the constraints provided. 
-#----When you find a logical connector, just push it onto the stack. 
+#----Go through the constraints provided.
+#----When you find a logical connector, just push it onto the stack.
 #----When you find a system constraint, prepend S: to the name of the system,
-#----Then push it on the stack. 
-#----If you find anything else, throw it away. 
+#----Then push it on the stack.
+#----If you find anything else, throw it away.
     while (@Constraints) {
-#DEBUG print ("Constraints Array: @Constraints\n"); 
+#DEBUG print ("Constraints Array: @Constraints\n");
         if (@Constraints[0] eq "and" || @Constraints[0] eq "or" ||
         @Constraints[0] eq "{" || @Constraints[0] eq "}") {
-            push(@ConstraintsStack, shift(@Constraints)); 
+            push(@ConstraintsStack, shift(@Constraints));
         } elsif ($Constraints[0] =~ /system/i) {
-            push(@ConstraintsStack, "S:@Constraints[1]"); 
-            shift(@Constraints); 
+            push(@ConstraintsStack, "S:@Constraints[1]");
+            shift(@Constraints);
         } else {
             shift(@Constraints);
-        } 
+        }
    }
 
-    $LeftParen = 0; 
-    $RightParen = 0; 
+    $LeftParen = 0;
+    $RightParen = 0;
 
-    $ConstraintIndex = 0; 
+    $ConstraintIndex = 0;
 
 #----Count the parenthesis, make sure they match. (This may be handled
 #----by the shell...?)
     foreach $ConstraintIndex (@ConstraintsStack) {
         if ($ConstraintIndex eq "{") {
-            $LeftParen++; 
+            $LeftParen++;
         } elsif ($ConstraintIndex eq "}") {
             $RightParen++;
         }
     }
 
     unless ($LeftParen == $RightParen) {
-        print("ERROR- USAGE: MISSMATCHED PARENTHESIS!"); 
-        return(-99); 
+        print("ERROR- USAGE: MISSMATCHED PARENTHESIS!");
+        return(-99);
     }
 
 #DEBUG print("Important Systemchecks: @ConstraintsStack\n");
 
-return(\@ConstraintsStack);  
+return(\@ConstraintsStack);
 
 }
 #------------------------------------------------------------------------------
@@ -785,152 +785,152 @@
     my @SystemChecks = @$SystemChecksArrayRef;
     my $ConstraintsUsed;
     my $Result;
-    my $ResultSave; 
-    my $TempResult; 
+    my $ResultSave;
+    my $TempResult;
     my $FinalResult = 0;
     my $ShiftIndex;
-    my $GottenPastProblemConstraints = 0; 
-    my $SystemChecksIndex = 0; 
+    my $GottenPastProblemConstraints = 0;
+    my $SystemChecksIndex = 0;
 
-    my $Garbage; 
+    my $Garbage;
 
-    my @ConstraintsResultsStack; 
+    my @ConstraintsResultsStack;
     my $ConstraintsResult;
-    my @ConstraintsResultsStackTemp; 
+    my @ConstraintsResultsStackTemp;
 
-#DEBUG print ("Statistics: @$StatisticsArrayRef\n"); 
+#DEBUG print ("Statistics: @$StatisticsArrayRef\n");
     while (@Constraints) {
-#DEBUG print ("Constraints Array: @Constraints\n"); 
+#DEBUG print ("Constraints Array: @Constraints\n");
 
 #----For each constraint on the stack, if it's a logical constraint, just
-#----Push it onto the new Constraints Results Stack. 
+#----Push it onto the new Constraints Results Stack.
 #----If it's a system constraint, push the name of the system with S: prepnded.
         while (@Constraints[0] eq "and" || @Constraints[0] eq "or" ||
         @Constraints[0] eq "{" || @Constraints[0] eq "}") {
-            push(@ConstraintsResultsStack, shift(@Constraints)); 
+            push(@ConstraintsResultsStack, shift(@Constraints));
         }
         if ($Constraints[0] =~ /system/i) {
-            push(@ConstraintsResultsStack, "S:@Constraints[1]") or 
-            die("Unmatched System Constraint");  
+            push(@ConstraintsResultsStack, "S:@Constraints[1]") or
+            die("Unmatched System Constraint");
         } elsif (!@Constraints) {
 #----CHANGE! Added a colon
-            push(@ConstraintsResultsStack, "S:"); 
+            push(@ConstraintsResultsStack, "S:");
         }
 
-#----Otherwise, check the constraint using CheckConstraint. 
+#----Otherwise, check the constraint using CheckConstraint.
         if (@Constraints) {
             ($ConstraintsUsed,$Result) = CheckConstraint(
 $ProblemStatisticsArrayRef,$ProblemType,$StatisticsArrayRef,@Constraints);
 #DEBUG print("ConstraintsUsed = $ConstraintsUsed Result = $Result\n");
 
-#----Shift off the arguments used, then push the result onto the ResultsStack. 
+#----Shift off the arguments used, then push the result onto the ResultsStack.
             foreach $ShiftIndex (1..$ConstraintsUsed) {
                 shift(@Constraints);
             }
-            push(@ConstraintsResultsStack, $Result); 
+            push(@ConstraintsResultsStack, $Result);
         }
     }
 
-#DEBUG print("Stack: @ConstraintsResultsStack\n"); 
+#DEBUG print("Stack: @ConstraintsResultsStack\n");
 #----Now that all the Constraints have been processed, if this is problem line,
-    if ($ProblemType ne "SOL") { 
-        @ConstraintsResultsStackTemp = (); 
-        $Result = shift(@ConstraintsResultsStack); 
+    if ($ProblemType ne "SOL") {
+        @ConstraintsResultsStackTemp = ();
+        $Result = shift(@ConstraintsResultsStack);
 
 #----Go through the array, get rid of all the System Constraints (set to 1).
         if ($Result =~ m/^S:/) {
-            push(@ConstraintsResultsStackTemp,"1"); 
+            push(@ConstraintsResultsStackTemp,"1");
         } else {
             while ($Result !~ m/^S:/ && defined($Result)) {
-                push(@ConstraintsResultsStackTemp,$Result); 
-                $Result = shift(@ConstraintsResultsStack); 
+                push(@ConstraintsResultsStackTemp,$Result);
+                $Result = shift(@ConstraintsResultsStack);
             }
         }
-#DEBUG print("Thing to check for logic: @ConstraintsResultsStackTemp\n"); 
+#DEBUG print("Thing to check for logic: @ConstraintsResultsStackTemp\n");
         ($FinalResult,$Garbage) = LogicParser($ProblemType,\@ConstraintsResultsStackTemp);
-#DEBUG print("FinalResult on that: $FinalResult\n"); 
+#DEBUG print("FinalResult on that: $FinalResult\n");
 #----Otherwise, we're at a system line
     } else {
 
-        $ResultSave = 0; 
-#DEBUG print("ConstraintsResults Before anything: @ConstraintsResultsStack\n");  
+        $ResultSave = 0;
+#DEBUG print("ConstraintsResults Before anything: @ConstraintsResultsStack\n");
 
         $Result = shift(@ConstraintsResultsStack);
         while ($Result !~ m/^S/ && @ConstraintsResultsStack) {
-            $Result = shift(@ConstraintsResultsStack); 
+            $Result = shift(@ConstraintsResultsStack);
         }
-#DEBUG print("ConstraintsResults sans problem stuff: @ConstraintsResultsStack and Res is $Result\n");  
+#DEBUG print("ConstraintsResults sans problem stuff: @ConstraintsResultsStack and Res is $Result\n");
 
 #----If there are no solution constraints, then we print everything.
         if (!@ConstraintsResultsStack) {
-            return(1,\@SystemChecks); 
+            return(1,\@SystemChecks);
         }
 
-        $ResultSave = $Result; 
-        $Result = shift(@ConstraintsResultsStack);  
+        $ResultSave = $Result;
+        $Result = shift(@ConstraintsResultsStack);
 
 #---Otherwise, we start consoldating the Results
         while (defined($Result)) {
 
-            @ConstraintsResultsStackTemp = (); 
-            
+            @ConstraintsResultsStackTemp = ();
+
             while ($Result !~ /^S/ && ~(($Result eq "and" || $Result eq "or" || $Result eq "{" || $Result eq "}") && $ConstraintsResultsStack[0] =~ /^S/) && @ConstraintsResultsStack) {
-                push(@ConstraintsResultsStackTemp,$Result); 
-                $Result = shift(@ConstraintsResultsStack); 
+                push(@ConstraintsResultsStackTemp,$Result);
+                $Result = shift(@ConstraintsResultsStack);
             }
 
             if (!@ConstraintsResultsStack) {
-                push(@ConstraintsResultsStackTemp,$Result); 
+                push(@ConstraintsResultsStackTemp,$Result);
             }
 
             if ($ResultSave) {
 
-#DEBUG print("Piece of Stack in focus: @ConstraintsResultsStackTemp\n"); 
-                $Garbage = pop(@ConstraintsResultsStackTemp); 
+#DEBUG print("Piece of Stack in focus: @ConstraintsResultsStackTemp\n");
+                $Garbage = pop(@ConstraintsResultsStackTemp);
 
                 while (($Garbage eq "and" || $Garbage eq "or" || $Garbage eq "{" || $Garbage eq "}" || $Garbage eq "S") && @ConstraintsResultsStackTemp) {
-#DEBUG print("Found some garbage at end of stack: $Garbage\n"); 
-                    $Garbage = pop(@ConstraintsResultsStackTemp); 
+#DEBUG print("Found some garbage at end of stack: $Garbage\n");
+                    $Garbage = pop(@ConstraintsResultsStackTemp);
                 }
 
-                push(@ConstraintsResultsStackTemp,$Garbage); 
+                push(@ConstraintsResultsStackTemp,$Garbage);
 
-#DEBUG print("Const: @ConstraintsResultsStackTemp\n");                 
-#----Once you've found everything up to the next System Constraint, 
-#----Pass it to the Logic Parser, and save the result. 
-                ($TempResult,$Garbage) = LogicParser($ProblemType,\@ConstraintsResultsStackTemp); 
+#DEBUG print("Const: @ConstraintsResultsStackTemp\n");
+#----Once you've found everything up to the next System Constraint,
+#----Pass it to the Logic Parser, and save the result.
+                ($TempResult,$Garbage) = LogicParser($ProblemType,\@ConstraintsResultsStackTemp);
                 if ($TempResult) {
-                    $FinalResult = $TempResult; 
+                    $FinalResult = $TempResult;
                 }
 
-                $SystemChecksIndex = 0; 
+                $SystemChecksIndex = 0;
                 while (defined(@SystemChecks[$SystemChecksIndex])) {
-#DEBUG print("SysChecks: @SystemChecks,Ressave is  $ResultSave and $TempResult\n"); 
+#DEBUG print("SysChecks: @SystemChecks,Ressave is  $ResultSave and $TempResult\n");
                     if (@SystemChecks[$SystemChecksIndex] eq $ResultSave && $TempResult > 0) {
-                        @SystemChecks[$SystemChecksIndex] = $ResultSave."RES:".$TempResult; 
+                        @SystemChecks[$SystemChecksIndex] = $ResultSave."RES:".$TempResult;
                     }
-                    $SystemChecksIndex++; 
+                    $SystemChecksIndex++;
                 }
 #DEBUG print("Check for logic: @ConstraintsResultsStackTemp , match to $ResultSave in SysChecks\n");
-#DEBUG print("ResultTemp: $TempResult and Finalresult: $FinalResult\n");  
+#DEBUG print("ResultTemp: $TempResult and Finalresult: $FinalResult\n");
             }
-            $ResultSave = $Result; 
-            $Result = shift(@ConstraintsResultsStack);  
+            $ResultSave = $Result;
+            $Result = shift(@ConstraintsResultsStack);
         }
     }
-#DEBUG print("Stack: @ConstraintsResultsStack\n"); 
-#DEBUG print("SystemChecks: @SystemChecks\n"); 
-#DEBUG print("FinalResult = $FinalResult\n"); 
+#DEBUG print("Stack: @ConstraintsResultsStack\n");
+#DEBUG print("SystemChecks: @SystemChecks\n");
+#DEBUG print("FinalResult = $FinalResult\n");
 
     if ($FinalResult == -99) {
-        return(-99,\@SystemChecks); 
+        return(-99,\@SystemChecks);
     } elsif ($FinalResult == 7) {
-        return(7,\@SystemChecks); 
+        return(7,\@SystemChecks);
     } elsif ($FinalResult >= 1) {
-        $FinalResult = 1; 
-    }    
+        $FinalResult = 1;
+    }
 
-#DEBUG print("Final: $FinalResult\n"); 
+#DEBUG print("Final: $FinalResult\n");
 
     return($FinalResult,\@SystemChecks);
 }
@@ -938,70 +938,70 @@
 #----LogicParser: Parse a stack of logical operators and parethesis
 #------------------------------------------------------------------------------
 sub LogicParser {
-    my ($ProblemType,$ConstraintsResultsStackRef) = @_; 
+    my ($ProblemType,$ConstraintsResultsStackRef) = @_;
 
-    my @ConstraintsResultsStack = @$ConstraintsResultsStackRef;  
-    my $FinalResult = 1; 
-    my $CurrentResult; 
-    my $FinalResultHolder; 
-    my $ConstraintsResultsStackRef; 
+    my @ConstraintsResultsStack = @$ConstraintsResultsStackRef;
+    my $FinalResult = 1;
+    my $CurrentResult;
+    my $FinalResultHolder;
+    my $ConstraintsResultsStackRef;
 
     while(@ConstraintsResultsStack) {
-#DEBUG print("Current Results Stack:@ConstraintsResultsStack\n"); 
-        $CurrentResult = shift(@ConstraintsResultsStack); 
-#DEBUG print("Current Result : $CurrentResult\n"); 
-#DEBUG print("At the top: Look: $CurrentResult\n"); 
+#DEBUG print("Current Results Stack:@ConstraintsResultsStack\n");
+        $CurrentResult = shift(@ConstraintsResultsStack);
+#DEBUG print("Current Result : $CurrentResult\n");
+#DEBUG print("At the top: Look: $CurrentResult\n");
 
         if ($CurrentResult eq "or") {
-#DEBUG print("In the or\n"); 
-            $CurrentResult = shift(@ConstraintsResultsStack); 
-#DEBUG print("Grab next: $CurrentResult\n"); 
+#DEBUG print("In the or\n");
+            $CurrentResult = shift(@ConstraintsResultsStack);
+#DEBUG print("Grab next: $CurrentResult\n");
             if ($CurrentResult =~ /^[+-]?\d+$/) {
                 if ($CurrentResult == -99) {
-                    $FinalResult += 0; 
+                    $FinalResult += 0;
                 } else {
-                    $FinalResult += $CurrentResult; 
+                    $FinalResult += $CurrentResult;
                 }
             } elsif ($CurrentResult eq "{") {
                 ($FinalResultHolder,$ConstraintsResultsStackRef) = LogicParser($ProblemType,\@ConstraintsResultsStack);
-                @ConstraintsResultsStack = @$ConstraintsResultsStackRef; 
-                $FinalResult += $FinalResultHolder; 
-#DEBUG print("After recursing, here's where we're at: @ConstraintsResultsStack , and CurrentRes is $CurrentResult\n"); 
+                @ConstraintsResultsStack = @$ConstraintsResultsStackRef;
+                $FinalResult += $FinalResultHolder;
+#DEBUG print("After recursing, here's where we're at: @ConstraintsResultsStack , and CurrentRes is $CurrentResult\n");
             } elsif ($CurrentResult eq "}") {
-                return ($FinalResult); 
+                return ($FinalResult);
             }
         } elsif ($CurrentResult eq "and") {
-            $CurrentResult = shift(@ConstraintsResultsStack); 
+            $CurrentResult = shift(@ConstraintsResultsStack);
            if ($CurrentResult =~ /^[+-]?\d+$/) {
                 if ($CurrentResult == -99) {
-                    $FinalResult = -99; 
+                    $FinalResult = -99;
                 } else {
-                    $FinalResult *= $CurrentResult; 
+                    $FinalResult *= $CurrentResult;
                 }
             } elsif ($CurrentResult eq "{") {
                 ($FinalResultHolder,$ConstraintsResultsStackRef) = LogicParser($ProblemType,\@ConstraintsResultsStack);
-                @ConstraintsResultsStack = @$ConstraintsResultsStackRef; 
-                $FinalResult *= $FinalResultHolder; 
-#DEBUG print("After recursing, here's where we're at: @ConstraintsResultsStack , and CurrentRes is $CurrentResult\n"); 
+                @ConstraintsResultsStack = @$ConstraintsResultsStackRef;
+                $FinalResult *= $FinalResultHolder;
+#DEBUG print("After recursing, here's where we're at: @ConstraintsResultsStack , and CurrentRes is $CurrentResult\n");
             } elsif ($CurrentResult eq "}") {
-                return ($FinalResult); 
-            } 
+                return ($FinalResult);
+            }
         } elsif ($CurrentResult eq "{") {
-            ($FinalResultHolder,$ConstraintsResultsStackRef) = LogicParser($ProblemType,\@ConstraintsResultsStack); 
-            @ConstraintsResultsStack = @$ConstraintsResultsStackRef; 
-            $FinalResult *= $FinalResultHolder; 
-#DEBUG print("After recursing, here's where we're at: @ConstraintsResultsStack , and CurrentRes is $CurrentResult\n"); 
+            ($FinalResultHolder,$ConstraintsResultsStackRef) = LogicParser($ProblemType,\@ConstraintsResultsStack);
+            @ConstraintsResultsStack = @$ConstraintsResultsStackRef;
+            $FinalResult *= $FinalResultHolder;
+#DEBUG print("After recursing, here's where we're at: @ConstraintsResultsStack , and CurrentRes is $CurrentResult\n");
 
         } elsif ($CurrentResult eq "}") {
-            return ($FinalResult,\@ConstraintsResultsStack); 
+            return ($FinalResult,\@ConstraintsResultsStack);
         } else {
-            $FinalResult *= $CurrentResult; 
+            $FinalResult *= $CurrentResult;
         }
 
-#DEBUG print("End of function: $FinalResult\n"); 
-    } 
-#DEBUG print("End of sub: $FinalResult\n"); 
-    return ($FinalResult,\@ConstraintsResultsStack); 
+#DEBUG print("End of function: $FinalResult\n");
+    }
+#DEBUG print("End of sub: $FinalResult\n");
+    return ($FinalResult,\@ConstraintsResultsStack);
 }
 #------------------------------------------------------------------------------
 #----CheckConstraint: Remove negation
@@ -1024,34 +1024,34 @@
     ($ConstraintsUsed,$Result) = CheckUnnegatedConstraint(
 $ProblemStatisticsArrayRef,$ProblemType,$StatisticsArrayRef,$Constraint,
 @RestOfConstraints);
-#DEBUG print("Result: $Result, where Constraint was $Constraint\n"); 
+#DEBUG print("Result: $Result, where Constraint was $Constraint\n");
     if ($Result < 0) {
         if ($Result == -99) {
             if ($Negated) {
-                return($ConstraintsUsed,1); 
+                return($ConstraintsUsed,1);
             } else {
-                return($ConstraintsUsed,-99); 
+                return($ConstraintsUsed,-99);
             }
         }
-        return($ConstraintsUsed,1); 
-    } elsif ($Result == 7) { 
+        return($ConstraintsUsed,1);
+    } elsif ($Result == 7) {
         if ($Negated) {
-            return($ConstraintsUsed,0); 
-        } else { 
-            return($ConstraintsUsed,7); 
+            return($ConstraintsUsed,0);
+        } else {
+            return($ConstraintsUsed,7);
         }
     } else {
         return($ConstraintsUsed,abs($Result - $Negated));
     }
 }
 #------------------------------------------------------------------------------
-#----CheckUnnegatedConstraint: Return TRUE or FALSE to query based on stats. 
+#----CheckUnnegatedConstraint: Return TRUE or FALSE to query based on stats.
 #------------------------------------------------------------------------------
 sub CheckUnnegatedConstraint {
     my ($ProblemStatisticsArrayRef,$ProblemType,$StatisticsArrayRef,$Constraint,@RestOfConstraints) = @_;
 
     my $ArgumentsUsed;
-    my @ArgumentsUsedArray; 
+    my @ArgumentsUsedArray;
 
 #DEBUG print("Constraint: $Constraint\n");
 #DEBUG print("    Values: @RestOfConstraints\n");
@@ -1060,22 +1060,22 @@
 #----Return number of arguments used and result. Always need number used.
 
     if ($Constraint =~ /^Form$/i) {
-        return(2,CheckForm($ProblemType,$StatisticsArrayRef,$RestOfConstraints[0])); 
+        return(2,CheckForm($ProblemType,$StatisticsArrayRef,$RestOfConstraints[0]));
     }
     if ($Constraint =~ /^Domain/i) {
         @ArgumentsUsedArray = Domains($ProblemType,$StatisticsArrayRef,
-@RestOfConstraints);        
+@RestOfConstraints);
         return(($ArgumentsUsedArray[0])+1,$ArgumentsUsedArray[1]);
     }
     if ($Constraint =~ /^Version/i) {
-        return(2,CheckVersion($ProblemType,$StatisticsArrayRef,$RestOfConstraints[0])); 
+        return(2,CheckVersion($ProblemType,$StatisticsArrayRef,$RestOfConstraints[0]));
     }
-    if ($Constraint =~ /^Rating/i)            { 
+    if ($Constraint =~ /^Rating/i)            {
         return(3,Rating($ProblemType,$StatisticsArrayRef,$RestOfConstraints[0],
-$RestOfConstraints[1])); 
+$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^Status/i) {
-        return(2,CheckStatus($ProblemType,$StatisticsArrayRef,$RestOfConstraints[0])); 
+        return(2,CheckStatus($ProblemType,$StatisticsArrayRef,$RestOfConstraints[0]));
     }
     if ($Constraint =~ /^Clause/i) {
         return(3,Clauses($ProblemType,$StatisticsArrayRef,
@@ -1083,11 +1083,11 @@
     }
     if ($Constraint =~ /^UnitFormula/i) {
         return(3,UnitFormulae($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^UnitClause/i) {
         return(3,UnitClauses($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^Atoms/i) {
         return(3,Atoms($ProblemType,$StatisticsArrayRef,
@@ -1103,15 +1103,15 @@
     }
     if ($Constraint =~ /^Formula/i) {
         return(3,Formulae($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^NonHornClause/i) {
         return(3,NonHornClauses($ProblemType,$StatisticsArrayRef,
 $RestOfConstraints[0],$RestOfConstraints[1]));
     }
-    if ($Constraint =~ /^Predicate/i || $Constraint =~ /^Symbol/i)            { 
+    if ($Constraint =~ /^Predicate/i || $Constraint =~ /^Symbol/i)            {
         return(3,Predicates($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^Propositional/i) {
         return(1,Propositional($ProblemType,$StatisticsArrayRef));
@@ -1142,9 +1142,9 @@
     if ($ProblemType ne "SOL" && $Constraint =~ /^PureEq/i) {
         return(1,PureEquality($ProblemType,$StatisticsArrayRef));
     }
-    if ($Constraint =~ /^Function/i)            { 
+    if ($Constraint =~ /^Function/i)            {
         return(3,Functions($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^Min.*Func.*Arity/i) {
         return(3,MinimalFunctionArity($ProblemType,$StatisticsArrayRef,
@@ -1165,7 +1165,7 @@
     }
     if ($Constraint =~ /^RRClause/i) {
         return(3,RRClauses($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^Av.*Literal/i) {
         return(3,AverageLiterals($ProblemType,$StatisticsArrayRef,
@@ -1178,35 +1178,35 @@
 #----SOLUTION CONDITIONS---------------------------------------
     if ($Constraint =~ /^System/i) {
         return(2,System($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0])); 
+$RestOfConstraints[0]));
     }
     if ($Constraint =~ /^ResultTime/i) {
         return(3,ResultTime($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^Result$/i) {
         return(2,Result($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0])); 
+$RestOfConstraints[0]));
     }
     if ($Constraint =~ /^Output/i) {
         return(2,Output($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0])); 
+$RestOfConstraints[0]));
     }
     if ($Constraint =~ /^Sol.*Depth/i) {
         return(3,SolutionDepth($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^Sol.*Formul/i) {
         return(3,SolutionFormulae($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^Sol.*Clauses/i) {
         return(3,SolutionClauses($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($Constraint =~ /^Sol.*Leave/i) {
         return(3,SolutionLeaves($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
     if ($ProblemType eq "SOL" && $Constraint =~ /^Equality/i) {
         return(1,SolutionEquality($ProblemType,$StatisticsArrayRef));
@@ -1220,11 +1220,11 @@
     }
     if ($Constraint =~ /^Selectivity/i) {
         return(3,Selectivity($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1],$ProblemStatisticsArrayRef)); 
+$RestOfConstraints[0],$RestOfConstraints[1],$ProblemStatisticsArrayRef));
     }
     if ($Constraint =~ /^Girth/i) {
         return(3,Girth($ProblemType,$StatisticsArrayRef,
-$RestOfConstraints[0],$RestOfConstraints[1])); 
+$RestOfConstraints[0],$RestOfConstraints[1]));
     }
 
 #----Default return 1 used, and it failed-------------------------------------
@@ -1237,15 +1237,15 @@
 #------------------------------------------------------------------------------
 #----This is only used once on the first problem if a domain constraint
 #----is given. After that a check is made in the main loop.
-sub Domains { 
+sub Domains {
     my ($ProblemType,$StatisticsArrayRef,@Constraints) = @_;
 
     my $NumberOfDomains = 0;
     my @Domains = ();
     my $ProblemDomain;
-    my $domainIndex; 
-    my $greaterThanEverything; 
-    
+    my $domainIndex;
+    my $greaterThanEverything;
+
 #----Get domains off constraint list
     while ($Constraints[$NumberOfDomains] =~ /^[A-Z]{3}$/) {
         $Domains[$NumberOfDomains] = $Constraints[$NumberOfDomains];
@@ -1261,38 +1261,38 @@
     if (grep(/$ProblemDomain/,@Domains)) {
         return($NumberOfDomains,1);
     } else {
-        $domainIndex = 0; 
-        $greaterThanEverything = 1; 
+        $domainIndex = 0;
+        $greaterThanEverything = 1;
         while (defined($Domains[$domainIndex])) {
             if ($ProblemDomain lt $Domains[$domainIndex]) {
                 $greaterThanEverything = 0;
-            } 
-            $domainIndex++; 
+            }
+            $domainIndex++;
         }
 
         if ($greaterThanEverything == 0) {
             return($NumberOfDomains,0);
         } else {
-           return($NumberOfDomains,-99);  
+           return($NumberOfDomains,-99);
         }
 
     }
 }
 #------------------------------------------------------------------------------
 sub CheckVersion {
-    my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_; 
-    
+    my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_;
+
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
-    my $AbreviatedConstraint = $AbbreviationHash{$CheckString}; 
+    my $AbreviatedConstraint = $AbbreviationHash{$CheckString};
     if (defined($AbreviatedConstraint)) {
-        $CheckString = $AbreviatedConstraint; 
+        $CheckString = $AbreviatedConstraint;
     }
- 
-    if ($CheckString =~ /^stan/i) { 
-        return(Standard($ProblemType,$StatisticsArrayRef)); 
+
+    if ($CheckString =~ /^stan/i) {
+        return(Standard($ProblemType,$StatisticsArrayRef));
     }
     if ($CheckString =~ /^incom/i || $CheckString =~ /^INC/i) {
         return(Incomplete($ProblemType,$StatisticsArrayRef));
@@ -1308,17 +1308,17 @@
     }
 }
 #------------------------------------------------------------------------------
-sub Standard { 
+sub Standard {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
-        return(-1); 
+        return(-1);
     }
 
     return($$StatisticsArrayRef[$ProblemIndexHash{'Version'}] eq "S");
 }
 #------------------------------------------------------------------------------
-sub Incomplete { 
+sub Incomplete {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1328,7 +1328,7 @@
     return($$StatisticsArrayRef[$ProblemIndexHash{'Version'}] eq "I");
 }
 #------------------------------------------------------------------------------
-sub Augmented { 
+sub Augmented {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1338,7 +1338,7 @@
     return($$StatisticsArrayRef[$ProblemIndexHash{'Version'}] eq "A");
 }
 #------------------------------------------------------------------------------
-sub Especial { 
+sub Especial {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1348,7 +1348,7 @@
     return($$StatisticsArrayRef[$ProblemIndexHash{'Version'}] eq "E");
 }
 #------------------------------------------------------------------------------
-sub Biased { 
+sub Biased {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1360,7 +1360,7 @@
 #------------------------------------------------------------------------------
 sub Rating {
     my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
-    my $Rating = 0; 
+    my $Rating = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
@@ -1368,21 +1368,21 @@
 
     $Rating = $$StatisticsArrayRef[$ProblemIndexHash{'Rating'}];
 
-    return(($Rating ne "?") && ExceptionCheck($Rating,$LowerBound,$UpperBound)); 
+    return(($Rating ne "?") && ExceptionCheck($Rating,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub CheckStatus {
-    my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_; 
-    
+    my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_;
+
     my $AbreviatedConstraint;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
-    $AbreviatedConstraint = $AbbreviationHash{$CheckString}; 
+    $AbreviatedConstraint = $AbbreviationHash{$CheckString};
     if (defined($AbreviatedConstraint)) {
-        $CheckString = $AbreviatedConstraint; 
+        $CheckString = $AbreviatedConstraint;
     }
     if ($CheckString =~ /^THM/i) {
         return(Theorem($ProblemType,$StatisticsArrayRef));
@@ -1401,10 +1401,10 @@
     }
     if ($CheckString =~ /^OPN/i) {
         return(Open($ProblemType,$StatisticsArrayRef));
-    } 
+    }
 }
 #------------------------------------------------------------------------------
-sub Theorem { 
+sub Theorem {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1412,11 +1412,11 @@
     }
 
     return(($ProblemType eq "THF" || $ProblemType eq "TFF" ||
-$ProblemType eq "FOF") && 
+$ProblemType eq "FOF") &&
 $$StatisticsArrayRef[$ProblemIndexHash{'Status'}] eq "THM");
 }
 #------------------------------------------------------------------------------
-sub CounterSatisfiable { 
+sub CounterSatisfiable {
 my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1424,11 +1424,11 @@
     }
 
     return(($ProblemType eq "THF" || $ProblemType eq "TFF" ||
-$ProblemType eq "FOF") && 
+$ProblemType eq "FOF") &&
 $$StatisticsArrayRef[$ProblemIndexHash{'Status'}] eq "CSA");
 }
 #------------------------------------------------------------------------------
-sub Unsatisfiable { 
+sub Unsatisfiable {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1438,7 +1438,7 @@
     return($$StatisticsArrayRef[$ProblemIndexHash{'Status'}] eq "UNS");
 }
 #------------------------------------------------------------------------------
-sub Satisfiable { 
+sub Satisfiable {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1448,7 +1448,7 @@
     return($$StatisticsArrayRef[$ProblemIndexHash{'Status'}] eq "SAT");
 }
 #------------------------------------------------------------------------------
-sub Unknown { 
+sub Unknown {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1459,7 +1459,7 @@
 Open($ProblemType,$StatisticsArrayRef));
 }
 #------------------------------------------------------------------------------
-sub Open { 
+sub Open {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1471,24 +1471,24 @@
 #------------------------------------------------------------------------------
 sub Predicates {
     my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
-    my $Predicates = 0; 
+    my $Predicates = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $Predicates = $$StatisticsArrayRef[$ProblemIndexHash{'Predicates'}];
-    return(ExceptionCheck($Predicates,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($Predicates,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
-sub Propositional { 
+sub Propositional {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
-    return($$StatisticsArrayRef[$ProblemIndexHash{'Predicates'}] == 
+    return($$StatisticsArrayRef[$ProblemIndexHash{'Predicates'}] ==
 $$StatisticsArrayRef[$ProblemIndexHash{'Propositions'}]);
 }
 #------------------------------------------------------------------------------
@@ -1511,8 +1511,8 @@
         return(-1);
     }
 
-    ($MinimalArity) = 
-($$StatisticsArrayRef[$ProblemIndexHash{'PredicateArities'}] =~ 
+    ($MinimalArity) =
+($$StatisticsArrayRef[$ProblemIndexHash{'PredicateArities'}] =~
 /([0-9]*)\-[0-9]*/);
     return($MinimalArity >= $LowerBound && $MinimalArity <= $UpperBound);
 }
@@ -1526,13 +1526,13 @@
         return(-1);
     }
 
-    ($MaximalArity) = 
-($$StatisticsArrayRef[$ProblemIndexHash{'PredicateArities'}] =~ 
+    ($MaximalArity) =
+($$StatisticsArrayRef[$ProblemIndexHash{'PredicateArities'}] =~
 /[0-9]*\-([0-9]*)/);
     return($MaximalArity >= $LowerBound && $MaximalArity <= $UpperBound);
 }
 #------------------------------------------------------------------------------
-sub Equality { 
+sub Equality {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1542,7 +1542,7 @@
     return($$StatisticsArrayRef[$ProblemIndexHash{'EqualityAtoms'}] > 0);
 }
 #------------------------------------------------------------------------------
-sub PureEquality { 
+sub PureEquality {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1550,11 +1550,11 @@
     }
 
     return(Equality($ProblemType,$StatisticsArrayRef) &&
-$$StatisticsArrayRef[$ProblemIndexHash{'Atoms'}] == 
+$$StatisticsArrayRef[$ProblemIndexHash{'Atoms'}] ==
 $$StatisticsArrayRef[$ProblemIndexHash{'EqualityAtoms'}]);
 }
 #------------------------------------------------------------------------------
-sub Arithmetic { 
+sub Arithmetic {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1564,16 +1564,16 @@
     return($$StatisticsArrayRef[$ProblemIndexHash{'ArithmeticSymbols'}] > 0);
 }
 #------------------------------------------------------------------------------
-sub Functions { 
+sub Functions {
     my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
-    my $Functions = 0; 
+    my $Functions = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $Functions = $$StatisticsArrayRef[$ProblemIndexHash{'Functions'}];
-    return(ExceptionCheck($Functions,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($Functions,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub MinimalFunctionArity {
@@ -1588,8 +1588,8 @@
     if ($$StatisticsArrayRef[$ProblemIndexHash{'FunctionArities'}] eq "---") {
         $MinimalArity = -1;
     } else {
-        ($MinimalArity) = 
-($$StatisticsArrayRef[$ProblemIndexHash{'FunctionArities'}] =~ 
+        ($MinimalArity) =
+($$StatisticsArrayRef[$ProblemIndexHash{'FunctionArities'}] =~
 /([0-9]*)\-[0-9]*/);
     }
     if ($LowerBound eq "-") {
@@ -1614,8 +1614,8 @@
     if ($$StatisticsArrayRef[$ProblemIndexHash{'FunctionArities'}] eq "---") {
         $MaximalArity = -1;
     } else {
-        ($MaximalArity) = 
-($$StatisticsArrayRef[$ProblemIndexHash{'FunctionArities'}] =~ 
+        ($MaximalArity) =
+($$StatisticsArrayRef[$ProblemIndexHash{'FunctionArities'}] =~
 /[0-9]*\-([0-9]*)/);
     }
     if ($LowerBound eq "-") {
@@ -1629,7 +1629,7 @@
 }
 #------------------------------------------------------------------------------
 sub CheckForm {
-    my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_; 
+    my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_;
 
 #DEBUG print("ProblemType  $ProblemType    CheckString $CheckString\n");
     if ($ProblemType eq "SOL") {
@@ -1637,155 +1637,155 @@
     }
 
     if ($CheckString eq "ANY") {
-        return(1); 
+        return(1);
     }
 
-    return ($ProblemType eq $CheckString); 
+    return ($ProblemType eq $CheckString);
 }
 #------------------------------------------------------------------------------
 sub Formulae {
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfFormulae = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfFormulae = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $NoOfFormulae = $$StatisticsArrayRef[$ProblemIndexHash{'Formulae'}];
-    return(ExceptionCheck($NoOfFormulae,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfFormulae,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub Clauses {
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfClauses = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfClauses = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $NoOfClauses = $$StatisticsArrayRef[$ProblemIndexHash{'Clauses'}];
-    return(ExceptionCheck($NoOfClauses,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfClauses,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub UnitFormulae {
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfUnitFormulae = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfUnitFormulae = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $NoOfUnitFormulae = $$StatisticsArrayRef[$ProblemIndexHash{'UnitFormulae'}];
-    return(ExceptionCheck($NoOfUnitFormulae,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfUnitFormulae,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub UnitClauses {
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfUnitClauses = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfUnitClauses = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $NoOfUnitClauses = $$StatisticsArrayRef[$ProblemIndexHash{'UnitClauses'}];
-    return(ExceptionCheck($NoOfUnitClauses,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfUnitClauses,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub AverageAtoms {
     my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
-    my $Atoms = 0; 
-    my $Formulae = 0; 
+    my $Atoms = 0;
+    my $Formulae = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $Atoms = $$StatisticsArrayRef[$ProblemIndexHash{'Atoms'}];
-    $Formulae = $$StatisticsArrayRef[$ProblemIndexHash{'Formulae'}]; 
+    $Formulae = $$StatisticsArrayRef[$ProblemIndexHash{'Formulae'}];
 
     if ($Formulae < 1) {
-        return(0); 
+        return(0);
     }
-    
-    return(ExceptionCheck($Atoms/$Formulae,$LowerBound,$UpperBound)); 
+
+    return(ExceptionCheck($Atoms/$Formulae,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub RRClauses {
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfRRClauses = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfRRClauses = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $NoOfRRClauses = $$StatisticsArrayRef[$ProblemIndexHash{'RRClauses'}];
-    return(ExceptionCheck($NoOfRRClauses,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfRRClauses,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub Atoms {
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfAtoms = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfAtoms = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $NoOfAtoms = $$StatisticsArrayRef[$ProblemIndexHash{'Atoms'}];
-    return(ExceptionCheck($NoOfAtoms,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfAtoms,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub EqualityAtoms {
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfEqualityAtoms = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfEqualityAtoms = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $NoOfEqualityAtoms = $$StatisticsArrayRef[$ProblemIndexHash{'EqualityAtoms'}];
-    return(ExceptionCheck($NoOfEqualityAtoms,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfEqualityAtoms,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub ArithmeticSymbols {
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfArithmeticSymbols = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfArithmeticSymbols = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
-    $NoOfArithmeticSymbols = 
+    $NoOfArithmeticSymbols =
 $$StatisticsArrayRef[$ProblemIndexHash{'ArithmeticSymbols'}];
-    return(ExceptionCheck($NoOfArithmeticSymbols,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfArithmeticSymbols,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 #==============================================================================
 #----CNF only constraints
 #==============================================================================
 #------------------------------------------------------------------------------
-sub Horn { 
+sub Horn {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
-    return($ProblemType eq "CNF" && 
+    return($ProblemType eq "CNF" &&
 $$StatisticsArrayRef[$ProblemIndexHash{'NonHornClauses'}] == 0);
 }
 #------------------------------------------------------------------------------
-sub NonHorn { 
+sub NonHorn {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
-    return($ProblemType eq "CNF" && 
+    return($ProblemType eq "CNF" &&
 $$StatisticsArrayRef[$ProblemIndexHash{'NonHornClauses'}] != 0);
 }
 #------------------------------------------------------------------------------
-sub RangeRestricted { 
+sub RangeRestricted {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType eq "SOL") {
@@ -1793,20 +1793,20 @@
     }
 
     return($ProblemType eq "CNF" &&
-$$StatisticsArrayRef[$ProblemIndexHash{'Clauses'}] == 
+$$StatisticsArrayRef[$ProblemIndexHash{'Clauses'}] ==
 $$StatisticsArrayRef[$ProblemIndexHash{'RRClauses'}]);
 }
 #------------------------------------------------------------------------------
 sub AverageLiterals {
     my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
-    my $AverageLiterals = 0; 
+    my $AverageLiterals = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $AverageLiterals = $$StatisticsArrayRef[$ProblemIndexHash{'AvLiterals'}];
-    return(ExceptionCheck($AverageLiterals,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($AverageLiterals,$LowerBound,$UpperBound));
 }
 #------------------------------------------------------------------------------
 sub UnitEquality {
@@ -1816,22 +1816,22 @@
         return(-1);
     }
 
-    return($ProblemType eq "CNF" && 
+    return($ProblemType eq "CNF" &&
 PureEquality($ProblemType,$StatisticsArrayRef) &&
-$$StatisticsArrayRef[$ProblemIndexHash{'Clauses'}] == 
+$$StatisticsArrayRef[$ProblemIndexHash{'Clauses'}] ==
 $$StatisticsArrayRef[$ProblemIndexHash{'UnitClauses'}]);
 }
 #------------------------------------------------------------------------------
 sub NonHornClauses {
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NonHornClauses = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NonHornClauses = 0;
 
     if ($ProblemType eq "SOL") {
         return(-1);
     }
 
     $NonHornClauses = $$StatisticsArrayRef[$ProblemIndexHash{'NonHornClauses'}];
-    return(($ProblemType eq "CNF") && (ExceptionCheck($NonHornClauses,$LowerBound,$UpperBound))); 
+    return(($ProblemType eq "CNF") && (ExceptionCheck($NonHornClauses,$LowerBound,$UpperBound)));
 }
 #------------------------------------------------------------------------------
 #==============================================================================
@@ -1841,35 +1841,35 @@
 sub System {
     my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_;
 
-    my $SolutionName; 
+    my $SolutionName;
     if ($ProblemType ne "SOL") {
-        return(-1); 
+        return(-1);
     }
 
-    $SolutionName = $$StatisticsArrayRef[$SolutionIndexHash{'SystemName'}]; 
+    $SolutionName = $$StatisticsArrayRef[$SolutionIndexHash{'SystemName'}];
 
     if ($CheckString =~ /^ANY/) {
-        return(7); 
+        return(7);
     }
-#DEBUG print("$SolutionName is solution name, $CheckString is check string here. Should it return?"); 
+#DEBUG print("$SolutionName is solution name, $CheckString is check string here. Should it return?");
 
     return($SolutionName =~ /^$CheckString/i)
 }
 #-----------------------------------------------------------------------------
 sub Result {
-    my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_; 
-    
+    my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_;
+
     my $AbreviatedConstraint;
 
     if ($ProblemType ne "SOL") {
         return(-1);
     }
 
-    $AbreviatedConstraint = $AbbreviationHash{$CheckString}; 
+    $AbreviatedConstraint = $AbbreviationHash{$CheckString};
     if (defined($AbreviatedConstraint)) {
-        $CheckString = $AbreviatedConstraint; 
-    }     
-    
+        $CheckString = $AbreviatedConstraint;
+    }
+
     if ($CheckString eq "SUC") {
         return(
 ($$StatisticsArrayRef[$SolutionIndexHash{'Result'}] eq "SUC") ||
@@ -1887,36 +1887,36 @@
 Result($ProblemType,$StatisticsArrayRef,"UNK")
         );
     } else {
-        return($$StatisticsArrayRef[$SolutionIndexHash{'Result'}] eq 
-$CheckString); 
+        return($$StatisticsArrayRef[$SolutionIndexHash{'Result'}] eq
+$CheckString);
     }
 }
 #-----------------------------------------------------------------------------
 sub ResultTime {
     my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
-    my $ResultTime = 0; 
+    my $ResultTime = 0;
 
     if ($ProblemType ne "SOL") {
-        return(-1); 
+        return(-1);
     }
-    
+
     $ResultTime = $$StatisticsArrayRef[$SolutionIndexHash{'ResultTime'}];
 
-    return(ExceptionCheck($ResultTime,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($ResultTime,$LowerBound,$UpperBound));
 }
 #-----------------------------------------------------------------------------
 sub Output {
-    my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_; 
-    
+    my ($ProblemType,$StatisticsArrayRef,$CheckString) = @_;
+
     my $AbreviatedConstraint;
 
     if ($ProblemType ne "SOL") {
-        return(-1); 
+        return(-1);
     }
 
-    $AbreviatedConstraint = $AbbreviationHash{$CheckString}; 
+    $AbreviatedConstraint = $AbbreviationHash{$CheckString};
     if (defined($AbreviatedConstraint)) {
-        $CheckString = $AbreviatedConstraint; 
+        $CheckString = $AbreviatedConstraint;
     }
 
     if ($CheckString eq "Sol") {
@@ -1939,67 +1939,67 @@
         return(
 ($$StatisticsArrayRef[$SolutionIndexHash{'Output'}] eq "Mod") ||
 Output($ProblemType,$StatisticsArrayRef,"FMo") ||
-Output($ProblemType,$StatisticsArrayRef,"Sat") 
+Output($ProblemType,$StatisticsArrayRef,"Sat")
         );
     } else {
-        return($$StatisticsArrayRef[$SolutionIndexHash{'Output'}] eq 
-$CheckString); 
+        return($$StatisticsArrayRef[$SolutionIndexHash{'Output'}] eq
+$CheckString);
     }
 }
 #-----------------------------------------------------------------------------
 sub SolutionFormulae {
 
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfFormulae = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfFormulae = 0;
 
     if ($ProblemType ne "SOL") {
-        return(-1); 
+        return(-1);
     }
 
     $NoOfFormulae = $$StatisticsArrayRef[$SolutionIndexHash{'SolutionFormulae'}];
-    return(ExceptionCheck($NoOfFormulae,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfFormulae,$LowerBound,$UpperBound));
 }
 #-----------------------------------------------------------------------------
 sub SolutionClauses {
 
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfClauses = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfClauses = 0;
 
     if ($ProblemType ne "SOL") {
-        return(-1); 
+        return(-1);
     }
-    
+
     $NoOfClauses = $$StatisticsArrayRef[$SolutionIndexHash{'SolutionClauses'}];
-    return(ExceptionCheck($NoOfClauses,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfClauses,$LowerBound,$UpperBound));
 }
 #-----------------------------------------------------------------------------
 sub SolutionDepth {
 
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $Depth = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $Depth = 0;
 
     if ($ProblemType ne "SOL") {
-        return(-1); 
+        return(-1);
     }
 
     $Depth = $$StatisticsArrayRef[$SolutionIndexHash{'SolutionDepth'}];
-    return(ExceptionCheck($Depth,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($Depth,$LowerBound,$UpperBound));
 }
 #-----------------------------------------------------------------------------
 sub SolutionLeaves {
 
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfLeaves = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfLeaves = 0;
 
     if ($ProblemType ne "SOL") {
-        return(-1); 
+        return(-1);
     }
 
     $NoOfLeaves = $$StatisticsArrayRef[$SolutionIndexHash{'SolutionLeaves'}];
-    return(ExceptionCheck($NoOfLeaves,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfLeaves,$LowerBound,$UpperBound));
 }
 #-----------------------------------------------------------------------------
-sub SolutionEquality { 
+sub SolutionEquality {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType ne "SOL") {
@@ -2009,7 +2009,7 @@
     return($$StatisticsArrayRef[$SolutionIndexHash{'SolutionEqualityAtoms'}] > 0);
 }
 #------------------------------------------------------------------------------
-sub SolutionPureEquality { 
+sub SolutionPureEquality {
     my ($ProblemType,$StatisticsArrayRef) = @_;
 
     if ($ProblemType ne "SOL") {
@@ -2017,66 +2017,66 @@
     }
 
     return(SolutionEquality($ProblemType,$StatisticsArrayRef) &&
-$$StatisticsArrayRef[$SolutionIndexHash{'SolutionAtoms'}] == 
+$$StatisticsArrayRef[$SolutionIndexHash{'SolutionAtoms'}] ==
 $$StatisticsArrayRef[$SolutionIndexHash{'SolutionEqualityAtoms'}]);
 }
 #------------------------------------------------------------------------------
 sub SolutionEqualityAtoms {
-    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_; 
-    my $NoOfEqualityAtoms = 0; 
+    my ($ProblemType,$StatisticsArrayRef,$LowerBound,$UpperBound) = @_;
+    my $NoOfEqualityAtoms = 0;
 
     if ($ProblemType ne "SOL") {
         return(-1);
     }
 
     $NoOfEqualityAtoms = $$StatisticsArrayRef[$SolutionIndexHash{'SolutionEqualityAtoms'}];
-    return(ExceptionCheck($NoOfEqualityAtoms,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($NoOfEqualityAtoms,$LowerBound,$UpperBound));
 }
 #-----------------------------------------------------------------------------
 sub Selectivity {
     my ($ProblemType,$StatisticsArrayRef,$LowerBound,
-$UpperBound,$ProblemStatisticsArrayRef) = @_; 
+$UpperBound,$ProblemStatisticsArrayRef) = @_;
 
     my $Leaves;
-    my $Formulae; 
-    my $OriginalProblemType; 
-    my $SolRatio; 
+    my $Formulae;
+    my $OriginalProblemType;
+    my $SolRatio;
 
     if ($ProblemType ne "SOL") {
-        return(-1); 
+        return(-1);
     }
-    $OriginalProblemType = $$ProblemStatisticsArrayRef[$ProblemIndexHash{'SupType'}]; 
-    $Formulae = $$ProblemStatisticsArrayRef[$ProblemIndexHash{'Formulae'}]; 
- 
+    $OriginalProblemType = $$ProblemStatisticsArrayRef[$ProblemIndexHash{'SupType'}];
+    $Formulae = $$ProblemStatisticsArrayRef[$ProblemIndexHash{'Formulae'}];
+
     $Leaves = $$StatisticsArrayRef[$SolutionIndexHash{'SolutionLeaves'}];
     if ($Leaves eq "-") {
-        return(0); 
+        return(0);
     }
 
     if ($Formulae == 0) {
-#----Divide by zero. What should we do here? 
-        return(0); 
+#----Divide by zero. What should we do here?
+        return(0);
     }
- 
-    $SolRatio = $Leaves/$Formulae; 
+
+    $SolRatio = $Leaves/$Formulae;
     $Leaves = ExceptionCheck($SolRatio,$LowerBound,$UpperBound);
-    return(ExceptionCheck($SolRatio,$LowerBound,$UpperBound)); 
+    return(ExceptionCheck($SolRatio,$LowerBound,$UpperBound));
 }
 #-----------------------------------------------------------------------------
 sub Girth {
     my ($ProblemType,$StatisticsArrayRef,$LowerBound,
-$UpperBound) = @_; 
+$UpperBound) = @_;
 
     my $Leaves;
     my $Depth;
-    my $GirthRatio; 
+    my $GirthRatio;
 
     if ($ProblemType ne "SOL") {
-        return(-1); 
+        return(-1);
     }
-  
+
     $Leaves = $$StatisticsArrayRef[$SolutionIndexHash{'SolutionLeaves'}];
-    $Depth = $$StatisticsArrayRef[$SolutionIndexHash{'SolutionDepth'}]; 
+    $Depth = $$StatisticsArrayRef[$SolutionIndexHash{'SolutionDepth'}];
 
     if ($Leaves eq "-") {
         return(0);
@@ -2086,23 +2086,23 @@
         return(0);
     }
 
-    $GirthRatio = $Leaves/$Depth; 
-    return(ExceptionCheck($GirthRatio,$LowerBound,$UpperBound)); 
+    $GirthRatio = $Leaves/$Depth;
+    return(ExceptionCheck($GirthRatio,$LowerBound,$UpperBound));
 }
 #-----------------------------------------------------------------------------
 sub ExceptionCheck {
-    my ($Statistic,$LowerBound,$UpperBound) = @_; 
+    my ($Statistic,$LowerBound,$UpperBound) = @_;
 
     if ($UpperBound eq "-" && $LowerBound eq "-") {
-        return(1); 
+        return(1);
     } elsif ($UpperBound eq "-") {
-        return($Statistic >= $LowerBound); 
+        return($Statistic >= $LowerBound);
     } elsif ($LowerBound eq "-") {
-        return($Statistic <= $UpperBound); 
+        return($Statistic <= $UpperBound);
     } elsif (($Statistic >= $LowerBound) && ($Statistic <= $UpperBound)) {
         return(1);
     } else {
-        return(0); 
+        return(0);
     }
-} 
+}
 #-----------------------------------------------------------------------------
diff -Naur '--exclude=*~' TPTP-v5.4.0/TPTP2X/tptp2X TPTP-v5.4.0.fink/TPTP2X/tptp2X
--- TPTP-v5.4.0/TPTP2X/tptp2X	2012-08-13 20:45:12.000000000 +0200
+++ TPTP-v5.4.0.fink/TPTP2X/tptp2X	2012-09-04 21:06:30.000000000 +0200
@@ -1,10 +1,10 @@
 #!/bin/tcsh
 #--------------------------------------------------------------------------
 #----These need to be installed
-set TPTPDirectory=/home/graph/tptp/TPTP
-set PrologInterpreter='/usr/local/eclipse5.10_140/bin/i386_linux/eclipse'
+set TPTPDirectory=@PREFIX@/share/tptp
+set PrologInterpreter='@PREFIX@/bin/swipl'
 set PrologArguments='-l 1024000 -g 1024000'
-set Gawk=/bin/awk
+set Gawk=@PREFIX@/bin/gawk
 #--------------------------------------------------------------------------
 #----Set default values for tptp2X parameters
 set FilesToConvert="$TPTPDirectory/Problems/*/*.p"
@@ -15,7 +15,7 @@
 set OutputDir="-"
 @ Quietness=1
 
-#----Set interactive mode off by default 
+#----Set interactive mode off by default
 set Interact=no
 set SizeSet=no
 set OutputDirSet=no
@@ -33,7 +33,7 @@
     exit
 endif
 
-set TPTP2XDirectory=$TPTPDirectory/TPTP2X
+set TPTP2XDirectory=@PREFIX@/lib/tptp
 
 #----Check that the TPTP2X directory exists
 if (!(-d "$TPTP2XDirectory")) then
@@ -63,7 +63,7 @@
 #----Parse the command line
 #----Need to set noglob in case of parameters like -s'[3,5]'.
 set noglob
-set argv=`getopt hniq:s:t:f:d:l: $*` 
+set argv=`getopt hniq:s:t:f:d:l: $*`
 set Interaction = 1
 unset noglob
 if ($status != 0) then
@@ -221,7 +221,7 @@
         endif
         if ($#FilesToConvert > 1) then
             echo -n "Files to convert      [$NameToShow ...] : "
-        else 
+        else
             echo -n "Files to convert      [$NameToShow] : "
         endif
         set Response=$<
@@ -393,7 +393,7 @@
 
 #----Put all transformations in a list, in case there is a list
 set Transformation="[$Transformation]"
- 
+
 #----If the format is OTTER, do a quick fix
 if ("$OutputFormat" =~ otter:*) then
     set OtterSoS=`expr $OutputFormat : "otter:\(.*\):.*"`
@@ -431,7 +431,7 @@
 set N=$#FilesToConvert
 set LastFile="$FilesToConvert[$N]"
 foreach FilePath ($FilesToConvert)
-#----Note if last file in loop, for error prompting 
+#----Note if last file in loop, for error prompting
     if ("$FilePath" == "$LastFile") then
         set EndOfLoop=yes
     endif
@@ -483,7 +483,7 @@
         if ("$FilePath" != "user" && "$FilePath" !~ /*) then
             set FilePath = "$cwd/$FilePath"
         endif
-#----Now check again that all went well, and if not give error message. 
+#----Now check again that all went well, and if not give error message.
         if ("$FilePath" != "user" && !(-f "$FilePath")) then
             echo "ERROR : $FilePath cannot be found, and has been ignored."
 #----If there is work accepted, or possibly more, then ask user
diff -Naur '--exclude=*~' TPTP-v5.4.0/TPTP2X/tptp2X.config TPTP-v5.4.0.fink/TPTP2X/tptp2X.config
--- TPTP-v5.4.0/TPTP2X/tptp2X.config	2012-08-13 20:45:12.000000000 +0200
+++ TPTP-v5.4.0.fink/TPTP2X/tptp2X.config	2012-09-04 21:09:00.000000000 +0200
@@ -74,5 +74,5 @@
 %------------------------------------------------------------------------------
 %----This specifies the parent directory of the TPTP Problems, Axioms and
 %----TPTP2X directories. Do not use a ~ in this.
-tptp_directory('/home/graph/tptp/TPTP').
+tptp_directory('@PREFIX@/share/tptp').
 %------------------------------------------------------------------------------
