Info2: <<
Package: parent-pm%type_pkg[perl]
Version: 0.223
Revision: 1
Distribution: (%type_pkg[perl] = 586) 10.4, (%type_pkg[perl] = 586) 10.5, (%type_pkg[perl] = 5100) 10.5, (%type_pkg[perl] = 5100) 10.6
License: Artistic
Description: Establish ISA relationships at compile time
DescDetail: <<

Allows you to both load one or more modules, while setting up
inheritance from those modules at the same time. Mostly similar in
effect to

  package Baz;
  BEGIN {
      require Foo;
      require Bar;
      push @ISA, qw(Foo Bar);
  }

By default, every base class needs to live in a file of its own. If
you want to have a subclass and its parent class in the same file, you
can tell parent not to load any modules by using the -norequire
switch:

  package Foo;
  sub exclaim { "I CAN HAS PERL" }

  package DoesNotLoadFooBar;
  use parent -norequire, 'Foo', 'Bar';
  # will not go looking for Foo.pm or Bar.pm

This is equivalent to the following code:

  package Foo;
  sub exclaim { "I CAN HAS PERL" }

  package DoesNotLoadFooBar;
  push @DoesNotLoadFooBar::ISA, 'Foo', 'Bar';

This is also helpful for the case where a package lives within a
differently named file:

  package MyHash;
  use Tie::Hash;
  use parent -norequire, 'Tie::StdHash';

This is equivalent to the following code:

  package MyHash;
  require Tie::Hash;
  push @ISA, 'Tie::StdHash';

If you want to load a subclass from a file that require would not
consider an eligible filename (that is, it does not end in either .pm
or .pmc), use the following code:

  package MySecondPlugin;
  require './plugins/custom.plugin'; # contains Plugin::Custom
  use parent -norequire, 'Plugin::Custom';
<<
Maintainer: Jesse Alama <jesse.alama@gmail.com>
Homepage: http://search.cpan.org/dist/parent
Source: mirror:cpan:authors/id/C/CO/CORION/parent-%v.tar.gz
Source-MD5: e89c37813e8497f1d8bbf223ab18a02d

Type: perl (5.8.6 5.8.8 5.10.0)
UpdatePOD: true

DocFiles: Changes

Depends: <<
	perl%type_pkg[perl]-core
<<

InstallScript: <<
	%{default_script}
	/bin/mv %i/share/man %i/lib/perl5/%type_raw[perl]
<<
<<
