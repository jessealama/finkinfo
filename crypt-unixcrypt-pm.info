Info2: <<
Package: crypt-unixcrypt-pm%type_pkg[perl]
Version: 1.0
Revision: 1
Distribution: (%type_pkg[perl] = 586) 10.4, (%type_pkg[perl] = 586) 10.5, (%type_pkg[perl] = 5100) 10.5, (%type_pkg[perl] = 5100) 10.6
License: Artistic
Description: Perl implementation of the crypt function
DescDetail: <<

This module is for all those poor souls whose perl port answers to the
use of crypt() with the message `The crypt() function is unimplemented
due to excessive paranoia.'.

This module won't overload a built-in crypt() unless forced by a true
value of the variable $Crypt::UnixCrypt::OVERRIDE_BUILTIN.

If you use this module, you probably neither have a built-in crypt()
function nor a crypt(3) manpage; so I'll supply the appropriate
portions of its description (from my Linux system) here:

crypt is the password encryption function. It is based on the Data
Encryption Standard algorithm with variations intended (among other
things) to discourage use of hardware implementations of a key search.

$plaintext is a user's typed password.

$salt is a two-character string chosen from the set
[a-zA-Z0-9./]. This string is used to perturb the algorithm in one of
4096 different ways.

By taking the lowest 7 bit of each character of $plaintext (filling it
up to 8 characters with zeros, if needed), a 56-bit key is
obtained. This 56-bit key is used to encrypt repeatedly a constant
string (usually a string consisting of all zeros). The returned value
points to the encrypted password, a series of 13 printable ASCII
characters (the first two characters represent the salt itself).

Warning: The key space consists of 2**56 equal 7.2e16 possible
values. Exhaustive searches of this key space are possible using
massively parallel computers. Software, such as crack(1), is available
which will search the portion of this key space that is generally used
by humans for passwords. Hence, password selection should, at minimum,
avoid common words and names. The use of a passwd(1) program that
checks for crackable passwords during the selection process is
recommended.

The DES algorithm itself has a few quirks which make the use of the
crypt(3) interface a very poor choice for anything other than password
authentication. If you are planning on using the crypt(3) interface
for a cryptography project, don't do it: get a good book on encryption
and one of the widely available DES libraries.
<<
Maintainer: Jesse Alama <jesse.alama@gmail.com>
Homepage: http://search.cpan.org/dist/Crypt-UnixCrypt
Source: mirror:cpan:authors/id/M/MV/MVORL/Crypt-UnixCrypt-%v.tar.gz
Source-MD5: ff007b7fdda2aa626acaca216750c422

Type: perl (5.8.6 5.8.8 5.10.0)
UpdatePOD: true

DocFiles: Changes README

Depends: <<
	perl%type_pkg[perl]-core
<<

InstallScript: <<
	%{default_script}
	/bin/mv %i/share/man %i/lib/perl5/%type_raw[perl]
<<
<<
